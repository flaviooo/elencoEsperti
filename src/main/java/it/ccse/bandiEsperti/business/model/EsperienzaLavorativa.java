package it.ccse.bandiEsperti.business.model;

// Generated 15-giu-2015 13.20.09 by Hibernate Tools 3.4.0.CR1

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.CascadeType;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;

import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;
import org.hibernate.annotations.OnDelete;
import org.hibernate.annotations.OnDeleteAction;

/**
 * EsperienzeLavorative generated by hbm2java
 */
@Entity
@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
@Table(name = "esperienze_lavorative")
public class EsperienzaLavorativa implements Comparable<EsperienzaLavorativa> {
	
    private Specializzazione specializzazione1;
    private Specializzazione specializzazione2;
    private Specializzazione specializzazione3;
	private int id;
	private TipoProfessione tipoProfessione;
	private Professione professione;
	private DatoreDiLavoro datoreDiLavoro;
	private int id_esperti;
	private Date dataInizio;
	private Date dataFine;
	@Transient
	private Date dataInizioString;
	@Transient
	private Date dataFineString;
	private Boolean inCorso = new Boolean(false);
	private String ruolo;
	private String attivitaLavorative;
	private String tipoEsperienza;
	private String datoreLavoro;
	private Boolean flagCarriera;
	private Boolean flagPrincipale;
	private Esperto esperto;
	
	private SimpleDateFormat sdf = new SimpleDateFormat("yyyy");
	
	@OneToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "id_specializzazioni_1", nullable = true)
	public Specializzazione getSpecializzazione1() {
		return this.specializzazione1;
	}
	public void setSpecializzazione1(Specializzazione specializzazione1) {
		this.specializzazione1 = specializzazione1;
	}
	
	@OneToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "id_specializzazioni_2", nullable = true)
	public Specializzazione getSpecializzazione2() {
		return this.specializzazione2;
	}
	public void setSpecializzazione2(Specializzazione specializzazione2) {
		this.specializzazione2 = specializzazione2;
	}
	
	@OneToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "id_specializzazioni_3", nullable = true)
	public Specializzazione getSpecializzazione3() {
		return this.specializzazione3;
	}
	public void setSpecializzazione3(Specializzazione specializzazione3) {
		this.specializzazione3 = specializzazione3;
	}

	@Transient
	public String getDataFineString() {

		if(this.dataFine!=null)
			return sdf.format(this.dataFine);
		return "";
	
	}
	
	@Transient
	public void setDataInizioString(String dataInizioString) {
		
		if(dataInizioString!=null)
			try {
				dataInizio=sdf.parse(dataInizioString);
			} catch (ParseException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
	
	}
	
	@Transient
	public void setDataFineString(String dataFineString) {
		
		if(dataFineString!=null)
			try {
				dataFine=sdf.parse(dataFineString);
			} catch (ParseException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
	}
	
	@Transient
	public String getDataInizioString() {
	
		if(this.dataInizio!=null){
			return sdf.format(this.dataInizio);
		}
		return "";
	}
	
	@Transient
	public int getDiffInizioFine() {
		String dataInizioS=getDataInizioString();
		String dataFineS=getDataFineString();
		if(!dataInizioS.isEmpty() && !dataFineS.isEmpty()){
			int diff=Integer.parseInt(dataFineS) - Integer.parseInt(dataInizioS);
			return diff; 
		}
		
		return 0;
	}
	@Transient
	public List<Integer> getDataInizioIncrementList(int increment) {
		
		String dataInizio=getDataInizioString();
		List<Integer> anniPresenti= new ArrayList<Integer>();
		for(int i=0; i<increment+1; i++){
			anniPresenti.add(Integer.parseInt(dataInizio)+(i));
		}
		return anniPresenti;
	}
	

	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	public int getId() {
		return id;
	}
	public void setId(int id) {
		this.id = id;
	}
	
	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "id_tipo_professione")
	public TipoProfessione getTipoProfessione() {
		return this.tipoProfessione;
	}

	public void setTipoProfessione(TipoProfessione tipoProfessione) {
		this.tipoProfessione = tipoProfessione;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "id_professione")
	public Professione getProfessione() {
		return this.professione;
	}

	public void setProfessione(Professione professione) {
		this.professione = professione;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "id_datore_di_lavoro")
	public DatoreDiLavoro getDatoreDiLavoro() {
		return this.datoreDiLavoro;
	}
	@Column(name="datoreDiLavoro", insertable=true, updatable=false)
	public void setDatoreDiLavoro(DatoreDiLavoro datoreDiLavoro) {
		this.datoreDiLavoro = datoreDiLavoro;
	}
	
	
	@Column(name="id_esperti", insertable =false, updatable=false)
	public Integer getId_esperti() {
		return id_esperti;
	}

	public void setId_esperti(Integer id_esperti) {
		this.id_esperti = id_esperti;
	}
	
	@ManyToOne(cascade = CascadeType.REFRESH)
	@JoinColumn(name="id_esperti")
	@OnDelete(action=OnDeleteAction.NO_ACTION)
	public Esperto getEsperto() {
		return esperto;
	}
	public void setEsperto(Esperto esperto) {
		this.esperto = esperto;
	}
	@Column(name = "tipo_esperienza")
	public String getTipoEsperienza() {
		return this.tipoEsperienza;
	}
	
	
	@Temporal(TemporalType.DATE)
	@Column(name = "data_inizio", nullable = false, length = 10)
	public Date getDataInizio() {
		return dataInizio;
	}

	public void setDataInizio(Date dataInizio) {
		this.dataInizio = dataInizio;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "data_fine", length = 10)
	public Date getDataFine() {
		return this.dataFine;
	}

	public void setDataFine(Date dataFine) {
		this.dataFine = dataFine;
	}

	@Column(name = "in_corso", nullable = false)
	public Boolean isInCorso() {
		return this.inCorso;
	}

	public void setInCorso(Boolean inCorso) {
		this.inCorso = inCorso;
	}

	@Column(name = "ruolo")
	public String getRuolo() {
		return this.ruolo;
	}

	public void setRuolo(String ruolo) {
		this.ruolo = ruolo;
	}

	@Column(name = "attivita_lavorative")
	public String getAttivitaLavorative() {
		return this.attivitaLavorative;
	}

	public void setAttivitaLavorative(String attivitaLavorative) {
		this.attivitaLavorative = attivitaLavorative;
	}
	


	public void setTipoEsperienza(String tipoEsperienza) {
		this.tipoEsperienza = tipoEsperienza;
	}

	@Column(name = "datore_lavoro")
	public String getDatoreLavoro() {
		return this.datoreLavoro;
	}

	public void setDatoreLavoro(String datoreLavoro) {
		this.datoreLavoro = datoreLavoro;
	}

	@Column(name = "flag_carriera", nullable = false)
	public Boolean isFlagCarriera() {
		return this.flagCarriera;
	}

	public void setFlagCarriera(Boolean flagCarriera) {
		this.flagCarriera = flagCarriera;
	}

	@Column(name = "flag_principale", nullable = false)
	public Boolean isFlagPrincipale() {
		return this.flagPrincipale;
	}

	public void setFlagPrincipale(Boolean flagPrincipale) {
		this.flagPrincipale = flagPrincipale;
	}
	
	@Override
	public int compareTo(EsperienzaLavorativa arg0) {
	
		
		// COMPARAZIONE DAL PIU' VECCHIO AL PIU' RECENTE
		// **********************************************
		//		int res = data.compareTo(i.getData());
		
		// COMPARAZIONE DAL PIU' RECENTE AL PIU' VECCHIO
		// **********************************************
		
		int diff=Integer.parseInt(arg0.getDataInizioString()) - Integer.parseInt(getDataInizioString());
		if(diff>0){
			return -1;
		}
		else if(diff<0){
			return 1;
		}
		else{
			int diff1 = 0;
			if(!arg0.getDataFineString().isEmpty() && !getDataFineString().isEmpty())
				diff1=Integer.parseInt(arg0.getDataFineString()) - Integer.parseInt(getDataFineString());
			if(diff1>0){
				return -1;
			}
			else if(diff1<0){
				return 1;
			}
		}
		return 0;
	
	}
	

}
